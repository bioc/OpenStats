'sex'                    ,
'age_in_days')],
size = 10,
replace = TRUE
), 10)
# library(OpenStats)
# library(nlme)
# Data preparation
fileCon = system.file("extdata", "test_continuous.csv", package = "OpenStats")
head(sample(
read.csv(fileCon, as.is = TRUE)[, c('external_sample_id'     ,
'biological_sample_group',
'sex'                    ,
'age_in_days')],
size = 10,
replace = TRUE
), 10)
# library(OpenStats)
# library(nlme)
# Data preparation
fileCon = system.file("extdata", "test_continuous.csv", package = "OpenStats")
head(sample(
read.csv(fileCon, as.is = TRUE)[, c('external_sample_id'     ,
'biological_sample_group',
'sex'                    ,
'age_in_days')],
size = 10,
replace = TRUE
), 10)
# library(OpenStats)
# library(nlme)
# Data preparation
fileCon = system.file("extdata", "test_continuous.csv", package = "OpenStats")
head(read.csv(fileCon, as.is = TRUE)[, c('external_sample_id'     ,
'biological_sample_group',
'sex'                    ,
'age_in_days')]
), 10)
head(read.csv(fileCon, as.is = TRUE)[, c('external_sample_id'     ,
'biological_sample_group',
'sex'                    ,
'age_in_days')]
,25)
tail(read.csv(fileCon, as.is = TRUE)[, c('external_sample_id'     ,
'biological_sample_group',
'sex'                    ,
'age_in_days')]
,25)
tail(read.csv(fileCon, as.is = TRUE)[sample(1:100,size = 10), c('external_sample_id'     ,
'biological_sample_group',
'sex'                    ,
'age_in_days')]
,25)
read.csv(fileCon, as.is = TRUE)[sample(1:100,size = 10), c('external_sample_id'     ,
'biological_sample_group',
'sex'                    ,
'age_in_days')]
library(openssl)
library(OpenStats)
?OpenStatsList
suppressPackageStartupMessages(library(nlme))
suppressPackageStartupMessages(library(summarytools))
?summarytools::dfSummary()
OpenStatsAnalysis()
?OpenStatsAnalysis()
#################
# 1 Data preparation
#################
# 1.1 Continuous data - Creating OpenStatsList object
#################
fileCon = system.file("extdata", "test_continuous.csv", package = "OpenStats")
test_Cont = OpenStatsList(
dataset = read.csv(fileCon),
testGenotype = 'experimental',
refGenotype  = 'control',
dataset.colname.genotype = 'biological_sample_group',
dataset.colname.batch = 'date_of_experiment',
dataset.colname.lifestage = NULL,
dataset.colname.weight = 'weight',
dataset.colname.sex = 'sex',
debug = FALSE
)
library(OpenStats)
#################
# 1 Data preparation
#################
# 1.1 Continuous data - Creating OpenStatsList object
#################
fileCon = system.file("extdata", "test_continuous.csv", package = "OpenStats")
test_Cont = OpenStatsList(
dataset = read.csv(fileCon),
testGenotype = 'experimental',
refGenotype  = 'control',
dataset.colname.genotype = 'biological_sample_group',
dataset.colname.batch = 'date_of_experiment',
dataset.colname.lifestage = NULL,
dataset.colname.weight = 'weight',
dataset.colname.sex = 'sex',
debug = FALSE
)
#################
# 2.1 Optimised Mixed model (MM) framework
#################
MM1_result = OpenStatsAnalysis(
OpenStatsList = test_Cont,
method = 'MM',
MM_fixed = data_point ~ Genotype  + Weight
)
plot(MM_result)
#################
# 2.1 Optimised Mixed model (MM) framework
#################
MM_result = OpenStatsAnalysis(
OpenStatsList = test_Cont,
method = 'MM',
MM_fixed = data_point ~ Genotype  + Weight
)
VO_MM1 = OpenStatsReport(MM_result)
plot(MM_result)
summary(MM1_result)
summary(MM_result)
plot(MM_result)
VO_MM1 = OpenStatsReport(MM_result)
str(VO_MM1)
head(str(VO_MM1))
VO_MM1 = OpenStatsReport(MM_result,JSON = TRUE)
VO_MM1
VO_MM1 = OpenStatsReport(MM_result,JSON = TRUE,pretty=TRUE)
VO_MM1
VO_MM1 = OpenStatsReport(MM_result,JSON = TRUE,pretty=TRUE,RemoveNullKeys = TRUE)
VO_MM1
test_Cont = OpenStatsList(
dataset = read.csv(fileCon),
testGenotype = 'experimental',
refGenotype  = 'control',
dataset.colname.genotype = 'biological_sample_group',
dataset.colname.batch = 'date_of_experiment',
dataset.colname.lifestage = NULL,
dataset.colname.weight = 'weight',
dataset.colname.sex = 'sex',
debug = FALSE
)
#################
# 2.3 Reference range framework
#################
RR_result = OpenStatsAnalysis(
OpenStatsList = test_Cont,
method = 'RR',
RR_formula  = data_point ~ Genotype + Sex
)
library(nlme)
library(OpenStats)
#################
# Categorical data - Creating OpenStatsList object
#################
fileCat   = system.file("extdata", "test_categorical.csv", package = "OpenStats")
test_Cat = OpenStatsList(
dataset = read.csv(fileCat, na.strings = '-'),
testGenotype = 'Aff3/Aff3',
refGenotype = '+/+',
dataset.colname.genotype = 'Genotype',
dataset.colname.batch = 'Assay.Date',
dataset.colname.lifestage = NULL,
dataset.colname.weight = 'Weight',
dataset.colname.sex = 'Sex'
)
test_Cat = OpenStatsList(
dataset = read.csv(fileCat, na.strings = '-'),
testGenotype = 'Aff3/Aff3',
refGenotype = '+/+',
dataset.colname.genotype = 'Genotype',
dataset.colname.batch = 'Assay.Date',
dataset.colname.lifestage = NULL,
dataset.colname.weight = 'Weight',
dataset.colname.sex = 'Sex',
debug = FALSE
)
#################
# Fisher exact framework
#################
FE_result = OpenStatsAnalysis(
OpenStatsList = test_Cat,
method = "FE",
FE_formula =  Thoracic.Processes ~ Genotype + Sex
)
summary(MM_result)
summary(FE_result)
OpenStatsReport(object = MM_result,JSON = TRUE,RemoveNullKeys = TRUE)
OpenStatsReport(object = MM_result,JSON = TRUE,RemoveNullKeys = TRUE,pretty=TRUE)
OpenStatsReport(
object = RR_result,
JSON = TRUE,
RemoveNullKeys = TRUE,
pretty = TRUE
)
OpenStatsReport(
object = FE_result,
JSON = TRUE,
RemoveNullKeys = TRUE,
pretty = TRUE
)
OpenStatsReport(
object = FE_result,
JSON = TRUE,
RemoveNullKeys = TRUE,
pretty = TRUE
)
####################################################################
file = system.file("extdata", "test_continuous.csv", package = "OpenStats")
####################################################################
# OpenStatsList object
####################################################################
OpenStatsList   = OpenStatsList(
dataset   = read.csv(file),
testGenotype = 'experimental',
refGenotype = 'control',
dataset.colname.batch = 'date_of_experiment',
dataset.colname.genotype = 'biological_sample_group',
dataset.colname.sex = 'sex',
dataset.colname.weight = 'weight'
)
####################################################################
file = system.file("extdata", "test_continuous.csv", package = "OpenStats")
###################
# OpenStatsList object
###################
OpenStatsList   = OpenStatsList(
dataset   = read.csv(file),
testGenotype = 'experimental',
refGenotype = 'control',
dataset.colname.batch = 'date_of_experiment',
dataset.colname.genotype = 'biological_sample_group',
dataset.colname.sex = 'sex',
dataset.colname.weight = 'weight',
debug = FALSE
)
plot   (OpenStatsList)
summary(OpenStatsList, style = 'grid')
plot(MM_result)
dim(read.csv(fileCon, as.is = TRUE))
df =(read.csv(fileCon, as.is = TRUE))
which(df$biological_sample_group =='experimental')
1+1
library(nlme)
library(OpenStats)
#################
# Data preparation
#################
# Continuous data - Creating OpenStatsList object
#################
fileCon = system.file("extdata", "test_continuous.csv", package = "OpenStats")
test_Cont = OpenStatsList(
dataset = read.csv(fileCon),
testGenotype = 'experimental',
refGenotype  = 'control',
dataset.colname.genotype = 'biological_sample_group',
dataset.colname.batch = 'date_of_experiment',
dataset.colname.lifestage = NULL,
dataset.colname.weight = 'weight',
dataset.colname.sex = 'sex',
debug = FALSE
)
#################
# LinearMixed model (MM) framework
#################
MM_result = OpenStatsAnalysis(
OpenStatsList = test_Cont,
method = 'MM',
MM_fixed = data_point ~ Genotype  + Weight,
debug = FALSE
)
Spliteffect = OpenStatsComplementarySplit(object = MM_result,variables = 'Sex')
suppressWarnings(suppressPackageStartupMessages(library(OpenStats)))
suppressWarnings(suppressPackageStartupMessages(library(nlme)))
suppressWarnings(suppressPackageStartupMessages(library(summarytools)))
knitr::opts_chunk
knitr::opts_chunk$get
knitr::opts_chunk$get()
?knitr::opts_chunk$get()
?knitr::opts_chunk
?dfSummary()
library(nlme)
library(OpenStats)
#################
# Data preparation
#################
# Continuous data - Creating OpenStatsList object
#################
fileCon = system.file("extdata", "test_continuous.csv", package = "OpenStats")
test_Cont = OpenStatsList(
dataset = read.csv(fileCon),
testGenotype = 'experimental',
refGenotype  = 'control',
dataset.colname.genotype = 'biological_sample_group',
dataset.colname.batch = 'date_of_experiment',
dataset.colname.lifestage = NULL,
dataset.colname.weight = 'weight',
dataset.colname.sex = 'sex',
debug = FALSE
)
test_Cont = OpenStatsList(
dataset = read.csv(fileCon),
testGenotype = 'experimental',
refGenotype  = 'control',
dataset.colname.genotype = 'biological_sample_group',
dataset.colname.batch = 'date_of_experiment',
dataset.colname.lifestage = NULL,
dataset.colname.weight = 'weight',
dataset.colname.sex = 'sex',
debug = 1
)
library(OpenStats)
test_Cont = OpenStatsList(
dataset = read.csv(fileCon),
testGenotype = 'experimental',
refGenotype  = 'control',
dataset.colname.genotype  = 'biological_sample_group',
dataset.colname.batch     = 'date_of_experiment',
dataset.colname.lifestage = NULL,
dataset.colname.weight    = 'weight',
dataset.colname.sex       = 'sex',
debug                     = FALSE
)
#################
# Reference range framework
#################
RR_result = OpenStatsAnalysis(
OpenStatsList = test_Cont,
method        = 'RR',
RR_formula    = data_point ~ Genotype + Sex,
debug         = FALSE
)
RR_result
lapply(RR_result,names)
lapply(RR_result$output,names)
lapply(RR_result,unction(x){lapply(RR_result$output,names)})
lapply(RR_result,function(x){lapply(RR_result$output,names)})
lapply(RR_result,function(x){lapply(x,names)})
warnings()
iinstall.packages('mdsr')
install.packages('mdsr')
library(mdsr)
Rnw2Rmd(path = 'C:/Users/My/Desktop/impc_stats_pipeline/impc_stats_pipeline/Late adults stats pipeline/OpenStats/OpenStatsPackage/vignettes/OpenStats.Rnw')
library(OpenStats)
library(BiocCheck)
devtools::build_vignettes()
devtools::check_win_release(args = "--compact-vignettes")
library(devtools)
build_vignettes()
library(devtools)
build_vignettes(pkg = 'OpenStats')
library(devtools)
build_vignettes()
library(devtools)
build_vignettes()
library(OpenStats)
example("OpenStatsAnalysis")
library(OpenStats)
example("OpenStatsAnalysis")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
```{r style, echo = FALSE, results = 'asis'}
BiocStyle::markdown()
```
---
title: '**OpenStats**: A Robust and Scalable Software Package for Reproducible Analysis of High-Throughput Phenotypic Data'
author:
name: Hamed Haseli Mashhadi
email: hamedhm@ebi.ac.uk
date: "`r format(Sys.time(), '%d %B %Y')`"
package: OpenStats
output:
BiocStyle::html_document
vignette: >
%\VignetteIndexEntry{Vignette Title}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
BiocStyle::markdown()
BiocStyle::html_document
html_document
tools:::buildVignettes(dir = "C:/Users/My/Desktop/impc_stats_pipeline/impc_stats_pipeline/Late adults stats pipeline/OpenStats/OpenStats.Rcheck/vign_test/OpenStats")
print(1:100)
print(1:100,2)
x=c("Genotype", "Weight" )
x==1
library(OpenStats)
browseVignettes(package = 'OpenStats')
library(tools)
find_gs_cmd
find_gs_cmd()
x=NULL
if(length(x)){print(1:100)}
x=1
if(length(x)){print(1:100)}
system.partition = 'c:'
dirs = c('Program Files', 'Program Files (x86)')
for (dir in dirs) {
dir.list = list.dirs(file.path(system.partition, dir), recursive = FALSE)
GsinList = grepl(pattern = 'gs', x = dir.list)
if (sum(GsinList) > 0) {
gsDirectory = which(GsinList == TRUE)
GsExeFiles = list.files(
dir.list[gsDirectory],
recursive = TRUE,
pattern = 'gswin',
include.dirs = TRUE,
full.names = TRUE
)[1]
message('Gs found! ~> ',GsExeFiles)
Sys.setenv(R_GSCMD = GsExeFiles)
break
}
find_gs_cmd()
browseVignettes(package = 'OpenStats')
library(OpenStats)
?browseVignettes
library(grid)
browseVignettes(package = 'OpenStats')
library(OpenStats)
browseVignettes(package = 'OpenStats')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("BiocCheck")
??updater
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
library(BiocCheck)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
utils::news(package="OpenStats")
library(OpenStats)
utils::news(package="OpenStats")
library(OpenStats)
utils::news(package="OpenStats")
library(OpenStats)
### Session information
SessionInfo()
##SessionInfo()
SessionInfo()
sSessionInfo()
sessionInfo()
knit_with_parameters('C:/Users/My/Desktop/impc_stats_pipeline/impc_stats_pipeline/Late adults stats pipeline/OpenStats/OpenStatsPackage/vignettes/OpenStats.Rmd')
unlink('vignettes/OpenStats_cache', recursive = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
# SmoothWin
install_github(
repo = '/Bioconductor/BiocCheck',
dependencies = FALSE,
upgrade = 'always',
force = TRUE,
build = TRUE,
quiet = FALSE
)
library(devtools)
# SmoothWin
install_github(
repo = '/Bioconductor/BiocCheck',
dependencies = FALSE,
upgrade = 'always',
force = TRUE,
build = TRUE,
quiet = FALSE
)
library(devtools)
# SmoothWin
install_github(
repo = 'Bioconductor/BiocCheck',
dependencies = FALSE,
upgrade = 'always',
force = TRUE,
build = TRUE,
quiet = FALSE
)
library(BiocCheck)
BiocCheck::BiocCheck(package = 'd:/OpenStats_1.0.0.tar.gz')
library(Bioconductor )
library(devtools)
# SmoothWin
install_github(
repo = 'Bioconductor/BiocManager',
dependencies = FALSE,
upgrade = 'always',
force = TRUE,
build = TRUE,
quiet = FALSE
)
BiocCheck::BiocCheck(package = 'd:/OpenStats_1.0.0.tar.gz')
seq_along(1:100)
seq_along(runif(10))
seq_along(10()
)
seq_along(10
)
seq_len(10)
library(OpenStats)
BiocCheck::BiocCheck(package = 'd:/OpenStats_1.0.0.tar.gz')
example(OpenStatsAnalysis)
?vapply(list, function, FUN.VALUE = type, ...)
?vapply
BiocCheck::BiocCheck(package = 'd:/OpenStats_1.0.0.tar.gz')
BiocManager::install(version = "3.9")
BiocCheck::BiocCheck(package = 'd:/OpenStats_1.0.0.tar.gz')
